/* tslint:disable */
/* eslint-disable */
/**
 * Purpose
 * My Application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    JWTResponse,
    JWTResponseFromJSON,
    JWTResponseToJSON,
    Login,
    LoginFromJSON,
    LoginToJSON,
} from '../models';

export interface PostAuthLoginRequest {
    login?: Login;
}

export interface PostAuthResetWithUsernameRequest {
    username: string;
}

/**
 * no description
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Post auth login
     */
    async postAuthLoginRaw(requestParameters: PostAuthLoginRequest): Promise<runtime.ApiResponse<JWTResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginToJSON(requestParameters.login),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTResponseFromJSON(jsonValue));
    }

    /**
     * Post auth login
     */
    async postAuthLogin(requestParameters: PostAuthLoginRequest): Promise<JWTResponse> {
        const response = await this.postAuthLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post auth logout
     */
    async postAuthLogoutRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Post auth logout
     */
    async postAuthLogout(): Promise<object> {
        const response = await this.postAuthLogoutRaw();
        return await response.value();
    }

    /**
     * Post auth reset with username
     */
    async postAuthResetWithUsernameRaw(requestParameters: PostAuthResetWithUsernameRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling postAuthResetWithUsername.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/reset/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Post auth reset with username
     */
    async postAuthResetWithUsername(requestParameters: PostAuthResetWithUsernameRequest): Promise<object> {
        const response = await this.postAuthResetWithUsernameRaw(requestParameters);
        return await response.value();
    }

}
