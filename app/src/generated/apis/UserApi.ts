/* tslint:disable */
/* eslint-disable */
/**
 * Purpose
 * My Application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Registration,
    RegistrationFromJSON,
    RegistrationToJSON,
    RegistrationResponse,
    RegistrationResponseFromJSON,
    RegistrationResponseToJSON,
    UserTO,
    UserTOFromJSON,
    UserTOToJSON,
} from '../models';

export interface PostUserRegisterRequest {
    registration?: Registration;
}

/**
 * no description
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Get user me
     */
    async getUserMeRaw(): Promise<runtime.ApiResponse<UserTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTOFromJSON(jsonValue));
    }

    /**
     * Get user me
     */
    async getUserMe(): Promise<UserTO> {
        const response = await this.getUserMeRaw();
        return await response.value();
    }

    /**
     * Post user register
     */
    async postUserRegisterRaw(requestParameters: PostUserRegisterRequest): Promise<runtime.ApiResponse<RegistrationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationToJSON(requestParameters.registration),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationResponseFromJSON(jsonValue));
    }

    /**
     * Post user register
     */
    async postUserRegister(requestParameters: PostUserRegisterRequest): Promise<RegistrationResponse> {
        const response = await this.postUserRegisterRaw(requestParameters);
        return await response.value();
    }

}
