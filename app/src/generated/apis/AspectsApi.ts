/* tslint:disable */
/* eslint-disable */
/**
 * Purpose
 * My Application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Aspect,
    AspectFromJSON,
    AspectToJSON,
    CreateAspect,
    CreateAspectFromJSON,
    CreateAspectToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface DeleteAspectsWithIdRequest {
    id: string;
    authorization?: string;
}

export interface PostAspectsRequest {
    authorization?: string;
    createAspect?: CreateAspect;
}

export interface PutAspectsWithIdRequest {
    id: string;
    createAspect?: CreateAspect;
}

/**
 * no description
 */
export class AspectsApi extends runtime.BaseAPI {

    /**
     * Delete aspects with id
     */
    async deleteAspectsWithIdRaw(requestParameters: DeleteAspectsWithIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAspectsWithId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/aspects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete aspects with id
     */
    async deleteAspectsWithId(requestParameters: DeleteAspectsWithIdRequest): Promise<void> {
        await this.deleteAspectsWithIdRaw(requestParameters);
    }

    /**
     * Get aspects
     */
    async getAspectsRaw(): Promise<runtime.ApiResponse<Array<Aspect>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/aspects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AspectFromJSON));
    }

    /**
     * Get aspects
     */
    async getAspects(): Promise<Array<Aspect>> {
        const response = await this.getAspectsRaw();
        return await response.value();
    }

    /**
     * Post aspects
     */
    async postAspectsRaw(requestParameters: PostAspectsRequest): Promise<runtime.ApiResponse<Aspect>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/aspects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAspectToJSON(requestParameters.createAspect),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AspectFromJSON(jsonValue));
    }

    /**
     * Post aspects
     */
    async postAspects(requestParameters: PostAspectsRequest): Promise<Aspect> {
        const response = await this.postAspectsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Put aspects with id
     */
    async putAspectsWithIdRaw(requestParameters: PutAspectsWithIdRequest): Promise<runtime.ApiResponse<Aspect>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putAspectsWithId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/aspects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAspectToJSON(requestParameters.createAspect),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AspectFromJSON(jsonValue));
    }

    /**
     * Put aspects with id
     */
    async putAspectsWithId(requestParameters: PutAspectsWithIdRequest): Promise<Aspect> {
        const response = await this.putAspectsWithIdRaw(requestParameters);
        return await response.value();
    }

}
