/* tslint:disable */
/* eslint-disable */
/**
 * Purpose
 * My Application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Goal,
    GoalFromJSON,
    GoalToJSON,
    GoalData,
    GoalDataFromJSON,
    GoalDataToJSON,
} from '../models';

export interface DeleteGoalsWithIdRequest {
    id: string;
    authorization?: string;
}

export interface PostGoalsRequest {
    authorization?: string;
    goalData?: GoalData;
}

export interface PutGoalsWithIdRequest {
    id: string;
    goalData?: GoalData;
}

/**
 * no description
 */
export class GoalsApi extends runtime.BaseAPI {

    /**
     * Delete goals with id
     */
    async deleteGoalsWithIdRaw(requestParameters: DeleteGoalsWithIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGoalsWithId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete goals with id
     */
    async deleteGoalsWithId(requestParameters: DeleteGoalsWithIdRequest): Promise<void> {
        await this.deleteGoalsWithIdRaw(requestParameters);
    }

    /**
     * Get goals
     */
    async getGoalsRaw(): Promise<runtime.ApiResponse<Array<Goal>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GoalFromJSON));
    }

    /**
     * Get goals
     */
    async getGoals(): Promise<Array<Goal>> {
        const response = await this.getGoalsRaw();
        return await response.value();
    }

    /**
     * Post goals
     */
    async postGoalsRaw(requestParameters: PostGoalsRequest): Promise<runtime.ApiResponse<Goal>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoalDataToJSON(requestParameters.goalData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GoalFromJSON(jsonValue));
    }

    /**
     * Post goals
     */
    async postGoals(requestParameters: PostGoalsRequest): Promise<Goal> {
        const response = await this.postGoalsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Put goals with id
     */
    async putGoalsWithIdRaw(requestParameters: PutGoalsWithIdRequest): Promise<runtime.ApiResponse<Goal>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putGoalsWithId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GoalDataToJSON(requestParameters.goalData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GoalFromJSON(jsonValue));
    }

    /**
     * Put goals with id
     */
    async putGoalsWithId(requestParameters: PutGoalsWithIdRequest): Promise<Goal> {
        const response = await this.putGoalsWithIdRaw(requestParameters);
        return await response.value();
    }

}
